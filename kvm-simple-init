#!/bin/sh

# kvm-simple-init
# Description : Simple init script to manage KVM virtual machines
# URL : https://github.com/tmartinfr/kvm-simple-init
# Copyright 2013 Thomas Martin <thomas@oopss.org>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -e


###############################################################################
# Hard-coded parameters
###############################################################################

# Configuration directory
CONFDIR=/etc/kvm-simple-init

# Number of seconds before :
WAIT_FOR_START=5        # VM start
WAIT_FOR_SOFT_STOP=30   # VM soft shutdown
WAIT_FOR_HARD_STOP=5    # VM hard shutdown
WAIT_FOR_TEST=2         # VM testing

# Number of seconds before sending command to qemu after connecting to port
QEMU_CMD_WAIT=2

# Timeout before netcat timeout when sending commands to qemu
NC_TIMEOUT=5


###############################################################################
# Help
###############################################################################

usage() {
	cat <<EOT
$0 [start|stop|restart] [VM]

$CONFDIR/ contains virtual machines configuration files.

The specified action (start, stop, restart) is executed :

- If VM argument is specified, on the corresponding file in the directory
- If not, on all files in the directory

VM configuration files should contain at least two shell variables :

MONITOR_PORT=    # Unique port number used to determine if VM is running
KVM_OPTS=        # kvm arguments necessary to launch the VM

See README file for examples.

EOT
	exit 1
}


###############################################################################
# Functions
###############################################################################

# Test if VM is running or stopped by checking availability of the monitor port.
# Wait until $timeout seconds.
vm_state() {
	state_to_check=$1   # "running" or "stopped"
	monitor_port=$2
	timeout=$3

	while [ $timeout -gt 0 ]; do
		if nc -z localhost $monitor_port; then
			[ "$state_to_check" = "running" ] && return 0
		else
			[ "$state_to_check" = "stopped" ] && return 0
		fi
		sleep 1
		timeout=$(($timeout - 1))
	done

	return 1
}

# Send command to VM using QEMU monitor port
send_qemu_cmd() {
	monitor_port="$1"
	cmd="$2"

	(sleep $QEMU_CMD_WAIT; echo "$cmd";) \
	   | timeout $NC_TIMEOUT nc localhost $monitor_port >/dev/null 2>/dev/null &
}

# Load environment variables in the configuration file
load_vm_config() {
	vmname="$1"
	vmfile="$CONFDIR/$vmname"

	if ! [ -r "$vmfile" ]; then
		echo "$vmfile not readable. Aborting."
		exit 2
	fi

	. $vmfile

	[ "$MONITOR_PORT" ] || { echo "MONITOR_PORT is missing in $vmfile."; exit 1; }
	[ "$KVM_OPTS" ] || { echo "KVM_OPTS is missing in $vmfile"; exit 1; }
}

# Clean global variables imported from the configuration file
cleanup_env() {
	unset MONITOR_PORT KVM_OPTS
}

# Start the VM with the name passed in argument
vm_start() {
	vmname="$1"
	load_vm_config $vmname

	if vm_state running $MONITOR_PORT $WAIT_FOR_TEST; then
		echo "$vmname already running."
		exit 5
	fi

	echo "Starting $vmname..."
	kvm $KVM_OPTS

	if vm_state running $MONITOR_PORT $WAIT_FOR_START; then
		echo "VM started."
	else
		echo "Failed to start."
		exit 3
	fi

	cleanup_env
}

# Stop the VM with the name passed in argument
vm_stop() {
	vmname="$1"
	load_vm_config $vmname

	if vm_state stopped $MONITOR_PORT $WAIT_FOR_TEST; then
		echo "$vmname already stopped."
		exit 5
	fi

	echo "Stopping $vmname..."
	send_qemu_cmd $MONITOR_PORT "system_powerdown"

	if vm_state stopped $MONITOR_PORT $WAIT_FOR_SOFT_STOP; then
		echo "VM stopped."
	else
		echo "Failed to stop using soft shutdown."

		echo "Killing $vmname..."
		send_qemu_cmd $MONITOR_PORT "quit"

		if vm_state stopped $MONITOR_PORT $WAIT_FOR_HARD_STOP; then
			echo "VM stopped."
		else
			echo "Failed to stop using hard shutdown."
			exit 4
		fi
	fi

	cleanup_env
}


###############################################################################
# Actions
###############################################################################

if [ $# -eq 1 ]; then
	vmnames=$(ls $CONFDIR)
elif [ $# -eq 2 ]; then
	vmnames=$2
else
	usage
fi

action="$1"

for vmname in $vmnames; do
	if [ "$action" = "start" ]; then
		vm_start $vmname
	elif [ "$action" = "stop" ]; then
		vm_stop $vmname
	elif [ "$action" = "restart" ]; then
		vm_stop $vmname
		vm_start $vmname
	else
		usage
	fi
done

