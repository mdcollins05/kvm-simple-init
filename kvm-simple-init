#!/bin/sh

# kvm-simple-init
# Description : Simple init script to manage KVM virtual machines
# URL : https://github.com/tmartinfr/kvm-simple-init
# Copyright 2013 Thomas Martin <thomas@oopss.org>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -e


###############################################################################
# Hard-coded parameters
###############################################################################

# Number of seconds before :
WAIT_FOR_START=5        # VM start
WAIT_FOR_SOFT_STOP=30   # VM soft shutdown
WAIT_FOR_HARD_STOP=5    # VM hard shutdown
WAIT_FOR_TEST=2         # VM testing

# Number of seconds before sending command to qemu after connecting to port
QEMU_CMD_WAIT=2

# Timeout before netcat timeout when sending commands to qemu
NC_TIMEOUT=5


###############################################################################
# Input validation
###############################################################################

usage() {
	cat <<EOT
$0 [start|stop|restart] VM

VM should match a configuration file in /etc/kvm-simple-init/.
EOT
	exit 1
}

if [ $# -ne 2 ]; then
	usage
fi

vmname="$2"
vmfile="/etc/kvm-simple-init/$vmname"

if ! [ -r "$vmfile" ]; then
	echo "$vmfile not readable. Aborting."
	exit 2
fi

source $vmfile


###############################################################################
# Functions
###############################################################################

# Test if VM is running or stopped by checking availability of the monitor port.
# Wait until $timeout seconds.
vm_state() {
	state_to_check=$1   # "running" or "stopped"
	monitor_port=$2
	timeout=$3

	while [ $timeout -gt 0 ]; do
		if nc -z localhost $monitor_port; then
			[ "$state_to_check" = "running" ] && return 0
		else
			[ "$state_to_check" = "stopped" ] && return 0
		fi
		sleep 1
		timeout=$(($timeout - 1))
	done

	return 1
}

# Send command to VM using QEMU monitor port
send_qemu_cmd() {
	monitor_port="$1"
	cmd="$2"

	(sleep $QEMU_CMD_WAIT; echo "$cmd";) \
	   | timeout $NC_TIMEOUT nc localhost $monitor_port >/dev/null 2>/dev/null &
}


###############################################################################
# Actions
###############################################################################

if [ "$1" = "start" ]; then
	if vm_state running $MONITOR_PORT $WAIT_FOR_TEST; then
		echo "$vmname already running."
		exit 5
	fi

	echo "Starting $vmname..."
	kvm $KVM_OPTS

	if vm_state running $MONITOR_PORT $WAIT_FOR_START; then
		echo "VM started."
		exit 0
	else
		echo "Failed to start $vmname."
		exit 3
	fi
elif [ "$1" = "stop" ]; then
	if vm_state stopped $MONITOR_PORT $WAIT_FOR_TEST; then
		echo "$vmname already stopped."
		exit 5
	fi

	echo "Stopping $vmname..."
	send_qemu_cmd $MONITOR_PORT "system_powerdown"

	if vm_state stopped $MONITOR_PORT $WAIT_FOR_SOFT_STOP; then
		echo "VM stopped."
		exit 0
	else
		echo "Failed to stop $vmname using soft shutdown."
	fi

	echo "Killing $vmname..."
	send_qemu_cmd $MONITOR_PORT "quit"

	if vm_state stopped $MONITOR_PORT $WAIT_FOR_HARD_STOP; then
		echo "VM stopped."
		exit 0
	else
		echo "Failed to stop $vmname using hard shutdown."
		exit 4
	fi
else
	usage
fi

